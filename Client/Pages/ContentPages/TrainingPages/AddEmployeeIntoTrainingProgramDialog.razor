<SfDialog Width="350px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible">
    <DialogEvents OnOpen="OpenDialog"> </DialogEvents>
    <DialogTemplates>
        <Header> 
            @if (IsAddDialog) {
                <div>Added Employee</div>
            }else{
                <div>List Employee</div>
            }
        </Header>
        <Content>
            <EditForm Model="TrainingProgram" Enhance OnSubmit="Save">
                <div class="card border-success">
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">Id</label>
                            <input @bind="TrainingProgram.Id" class="form-control" disabled />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Name</label>
                            <InputText @bind-Value="TrainingProgram.Name" class="form-control" disabled />
                        </div>
                        @if (IsAddDialog)
                        {
                        <div class="form-group mt-1">
                            <label class="form-label">Add Employee</label>
                            <SfDropDownList TValue="string" TItem="Employee" Placeholder="Add Employee" DataSource="Employees">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="Employee" ValueChange="OnAddEmployee"></DropDownListEvents>
                            </SfDropDownList>
                        </div>
                        }
                        <div class="form-group mt-2">
                            <label class="form-label">List Employee</label>
                            <div class="table-wrapper">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th scope="col">#</th>
                                            <th scope="col">Name</th>
                                            @if (IsAddDialog)
                                            {
                                                <th scope="col">Action</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                        int count = 1;
                                        foreach (var item in SelectedEmployees)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Text</td>
                                                @if (IsAddDialog)
                                                {
                                                    <td>
                                                        <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                                    </td>
                                                }                                                    
                                            </tr>
                                            count++;
                                        }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        @if (IsAddDialog)
        {
            <DialogButton Content="SAVE" Type="ButtonType.Submit" IsPrimary="true" OnClick="Save" />
        }
        else
        {
            <DialogButton Content="CLOSE" IsPrimary="true" OnClick="Close" />
        }
    </DialogButtons>
</SfDialog>

<style>
    .table-wrapper {
        max-height: 200px;
        overflow-y: auto;
    }

    .table thead {
        position: sticky;
        top: 0;
        background-color: white; /* Màu nền của thead để tránh che khuất nội dung khi cuộn */
        z-index: 1; /* Đảm bảo thead luôn ở trên các dòng tbody */
    }

    .table thead th {
        background-color: white; /* Màu nền của các tiêu đề cột */
    }
</style>

@code {
    [Parameter] public TrainingProgram TrainingProgram { get; set; } = new();
    [Parameter] public List<Participant> Participants { get; set; } = new();
    [Parameter] public EventCallback<List<int>> HandleSaveAEITP { get; set; }

    private bool IsVisible { get; set; } = false;
    private bool IsDelete { get; set; } = false;
    private bool IsAddDialog { get; set; } = true;

    public List<Employee> Employees { get; set; } = new();
    public List<Participant> SelectedParticipants { get; set; } = new();

    public class BaseEmployee
    {
        public int Id { get; set; }
        public string Text { get; set; }
    }

    public List<BaseEmployee> SelectedEmployees { get; set; } = new();

    public List<int> AddedEmployees { get; set; } = new();

    public async void OpenDialog()
    {
        Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
        SelectedEmployees = new();
        IsVisible = true;
        SelectedParticipants = Participants.Where(t => t.TrainingProgramId == TrainingProgram.Id).ToList();
        foreach (var participant in SelectedParticipants)
        {
            var selectedEmployee = new BaseEmployee();
            selectedEmployee.Id = participant.EmployeeId;
            selectedEmployee.Text = participant.Employee?.Name!;
            Employees.RemoveAll(e => e.Id == participant.EmployeeId);
            SelectedEmployees.Add(selectedEmployee);
        }
        StateHasChanged();
    }

    public void ChangeTypeDialog(bool isAdd) => IsAddDialog = isAdd;

    //Delete
    private async Task DeleteClicked(BaseEmployee baseEmployee)
    {
        bool confrim = await dialogService.ConfirmAsync($"Are you sure you wanna delete {baseEmployee.Text}?", "Confrim Delete");
        if (!confrim) return;

        var response = await participantService.DeleteById(TrainingProgram.Id, baseEmployee.Id, Constants.ParticipantBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
        {
            IsDelete = true;
            var deleteEmployee = await employeeService.GetById(baseEmployee.Id, Constants.EmployeeBaseUrl);
            SelectedEmployees.RemoveAll(e => e.Id == baseEmployee.Id);
            AddedEmployees.RemoveAll(id => id == baseEmployee.Id);
            Employees.Add(deleteEmployee);
            StateHasChanged();
        }        
    }

    private async void Save()
    {
        if (AddedEmployees.Count == 0 && !IsDelete)
            await dialogService.AlertAsync("You need to provide Training Program name.", "Alert!");
        else
        {
            await HandleSaveAEITP.InvokeAsync(AddedEmployees);
            IsVisible = false;
        }
    }
    private void Close() => IsVisible = false;

    public void OnAddEmployee(ChangeEventArgs<string, Employee> args)
    {
        // Kiểm tra nếu args.Value không null và có thể chuyển đổi thành int
        if (!string.IsNullOrEmpty(args.Value) && int.TryParse(args.Value, out int employeeId))
        {
            var selectedEmployee = Employees.Find(e => e.Id == int.Parse(args.Value));
            if (selectedEmployee != null)
            {
                var employee = new BaseEmployee();
                employee.Id = selectedEmployee.Id;
                employee.Text = selectedEmployee.Name!;
                SelectedEmployees.Add(employee);
                Employees.Remove(selectedEmployee);
                AddedEmployees.Add(selectedEmployee.Id);

                // Update DataSource of SfDropDownList
                StateHasChanged();
            }
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }
}
