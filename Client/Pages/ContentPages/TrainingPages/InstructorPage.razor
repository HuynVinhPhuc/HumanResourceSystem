@implements IDisposable

@if (allState.ShowInstructor)
{
    <div class="continer mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Instructor</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked"><i class="bi bi-plus-circle-dotted"> </i> Add Instructor </button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Email</th>
                                        <th scope="col">Telephone Number</th>
                                        <th scope="col">Address</th>
                                        <th scope="col">Specialization</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Instructors is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Instructors)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>@item.Email</td>
                                                <td>@item.TelephoneNumber</td>
                                                <td>@item.Address</td>
                                                <td>@item.Specialization</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>&#160;
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4"><div class="alert alert-info text-center">No User registered yet!</div></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .cursorStyle {
        cursor: pointer
    }
</style>

<InstructorDialog @ref="instructorDialog"
                  HandleSaveOperationEvent="HandleSaveOperationEvent"
                  Instructor="Instructor" />

@code {
    public string Title { get; set; } = "Add";
    Instructor Instructor = new();
    InstructorDialog? instructorDialog;
    public List<Instructor> Instructors { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetInstructors();
        allState.Action += StateHasChanged;
    }

    private async Task GetInstructors() => Instructors = await instructorService.GetAll(Constants.InstructorBaseUrl);

    void AddButtonClicked()
    {
        instructorDialog?.ChangeTitle("Add");
        Instructor = new();
        OpenDialog();
    }

    void OpenDialog()
    {
        instructorDialog?.OpenDialog();
    }

    //Add or Update
    private async Task HandleSaveOperationEvent(Instructor instructor)
    {
        bool successCheck = false;
        if (instructor.Id > 0)
        {
            var result = await instructorService.Update(Instructor, Constants.InstructorBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var result = await instructorService.Insert(Instructor, Constants.InstructorBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        if (successCheck)
        {
            Instructor = new();
            await GetInstructors();
            instructorDialog?.ChangeTitle("Add");
        }
    }

    // Edit
    private void EditClicked(Instructor instructor)
    {
        instructorDialog?.ChangeTitle("Update");
        Instructor = instructor;
        OpenDialog();
    }

    //Delete
    private async Task DeleteClicked(Instructor instructor)
    {
        bool confrim = await dialogService.ConfirmAsync($"Are you sure you wanna delete {instructor.Name}?", "Confrim Delete");
        if (!confrim) return;

        var response = await instructorService.DeleteById(instructor.Id, Constants.InstructorBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result) await GetInstructors();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
