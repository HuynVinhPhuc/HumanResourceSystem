
@if (IsVisible)
{
    <div class="card-body">
        @{
            var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
        }
        <SfGrid DataSource="@MyOvertimes" AllowPaging="true" AllowSorting="true" Toolbar=@Tool AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
            <GridPageSettings PageSize="5"></GridPageSettings>
            <GridEvents OnToolbarClick="ToolbarClickHanlder" TValue="OvertimeData"></GridEvents>
            <GridColumns>
                <GridColumn Field=@nameof(OvertimeData.EmployeeId) HeaderText="Employee ID"></GridColumn>
                <GridColumn Field=@nameof(OvertimeData.Employee) HeaderText="Employee Name"></GridColumn>
                <GridColumn Field=@nameof(OvertimeData.Type) HeaderText="Type"></GridColumn>
                <GridColumn Field=@nameof(OvertimeData.Status) HeaderText="Status"></GridColumn>
                <GridColumn Field=@nameof(OvertimeData.StartDate) HeaderText="Start Date"></GridColumn>
                <GridColumn Field=@nameof(OvertimeData.EndDate) HeaderText="End Date"></GridColumn>
                <GridColumn Field=@nameof(OvertimeData.NumberOfDate) HeaderText="Number of days"></GridColumn>
                <GridColumn HeaderText="Action">
                    <Template>
                        @{
                            var item = (context as OvertimeData);
                            <div>
                                @if (item!.Status == "Processing" || item!.Overtime!.StartDate > DateTime.Now)
                                {
                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item!.Overtime!)"></i>
                                    <span> </span>
                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item!.Overtime!)"></i>
                                }
                                else
                                {
                                    <span> </span>
                                    <i class="bi bi-eye text-info" id="cursorStyle" @onclick="() => ShowClicked(item!.Overtime!)"></i>
                                }
                            </div>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
}

<style>
    .cursorStyle {
        cursor: pointer
    }
</style>

<OvertimeDialog @ref="overtimeDialog"
                ItemModel="ItemModel"
                OvertimeTypes="OvertimeTypes"
                isRequested="true"
                HandleSaveOperationEvent="HandleSaveOperationEvent">
</OvertimeDialog>

@code {
    private SfGrid<OvertimeData>? DefaultGrid;
    OvertimeDialog? overtimeDialog;
    Overtime ItemModel = new();
    public List<Overtime> Overtimes { get; set; } = new();
    public List<OvertimeType> OvertimeTypes { get; set; } = new();

    [Parameter] public bool IsVisible { get; set; } = false;

    [Parameter] public int CurrentEmployeeId { get; set; } = new();

    public class OvertimeData
    {
        public Overtime? Overtime { get; set; }
        public int EmployeeId { get; set; }
        public string? Employee { get; set; }
        public string? Type { get; set; }
        public string? Status { get; set; }
        public string? StartDate { get; set; }
        public string? EndDate { get; set; }
        public int NumberOfDate { get; set; }
    }

    public List<OvertimeData> MyOvertimes { get; set; } = new List<OvertimeData>();

    public async void OpenMyOvertime()
    {
        IsVisible = true;
        await Setups();
        StateHasChanged();
    }

    public void CloseMyOvertime()
    {
        IsVisible = false;
        StateHasChanged();
    }

    public async Task Setups()
    {
        await GetOvertime();
        await GetTypes();
    }

    private async Task GetTypes() => OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);

    private async Task GetOvertime()
    {
        Overtimes = await overtimeService.GetAll(Constants.OvertimeBaseUrl);
        await GetOvertimeData();
    }

    private async Task GetOvertimeData()
    {
        MyOvertimes = Overtimes
        .Where(s => s.EmployeeId == CurrentEmployeeId)
        .Select(s => new OvertimeData
            {
                Overtime = s,
                EmployeeId = s.EmployeeId,
                Employee = s.Employee?.Name,
                Type = s.OvertimeType?.Name,
                Status = s.Status,
                StartDate = s.StartDate.ToString("MM/dd/yyyy"),
                EndDate = s.EndDate.ToString("MM/dd/yyyy"),
                NumberOfDate = s.NumberOfDate
            })
        .Reverse()
        .ToList();
    }

    void OpenDialog() => overtimeDialog?.OpenDialog();

    //Add or Update
    private async Task HandleSaveOperationEvent(Overtime item)
    {
        var result = await overtimeService.Update(item, Constants.OvertimeBaseUrl);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ItemModel = new();
            overtimeDialog?.CloseDialog();
            await GetOvertime();
            await Setups();
            StateHasChanged();
        }
    }

    // Edit
    private void EditClicked(Overtime item)
    {
        ItemModel = item;
        overtimeDialog?.ChangeTitle("Update");
        OpenDialog();
    }

    //Delete
    private async Task DeleteClicked(Overtime item)
    {
        bool confrim = await dialogService.ConfirmAsync($"Are you sure you wanna delete this?", "Confrim Delete");
        if (!confrim) return;

        var response = await overtimeService.DeleteById(item.Id, Constants.OvertimeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result) {
            await GetOvertime();
            await Setups();
            StateHasChanged();
        }
    }

    // Show
    private void ShowClicked(Overtime item)
    {
        ItemModel = item;
        overtimeDialog?.ChangeTitle("View");
        OpenDialog();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    // Excel Export / PDF Export
    public async Task ToolbarClickHanlder(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExcelExport()!;

        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid!.PdfExport()!;
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
