
@if (IsVisible)
{
    <div class="card-body">
        @{
            var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
        }
        <SfGrid DataSource="@MyDegrees" AllowPaging="true" AllowSorting="true" Toolbar=@Tool AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
            <GridPageSettings PageSize="5"></GridPageSettings>
            <GridEvents OnToolbarClick="ToolbarClickHanlder" TValue="DegreeData"></GridEvents>
            <GridColumns>
                <GridColumn Field=@nameof(DegreeData.EmployeeId) HeaderText="Employee ID" Width="110px"></GridColumn>
                <GridColumn Field=@nameof(DegreeData.Employee) HeaderText="Employee Name"></GridColumn>
                <GridColumn Field=@nameof(DegreeData.Name) HeaderText="Degree Name" Width="400px"></GridColumn>
                <GridColumn Field=@nameof(DegreeData.DegreeDate) HeaderText="Degree Date" Width="120px"></GridColumn>
                <GridColumn Field=@nameof(DegreeData.DegreeInstitution) HeaderText="Degree Institution"></GridColumn>
                <GridColumn HeaderText="Action" Width="70px">
                    <Template>
                        @{
                            var item = (context as DegreeData);
                            <div>
                                <i class="bi bi-eye text-info" id="cursorStyle" @onclick="() => ShowClicked(item!.Degree!)"></i>
                            </div>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
}

<style>
    .cursorStyle {
        cursor: pointer
    }
</style>

<DegreeDialog @ref="degreeDialog"
              Employee="CurrentEmployee"
              Degree="Degree">
</DegreeDialog>

@code {
    private SfGrid<DegreeData>? DefaultGrid;
    public List<Degree> MyDegreesData { get; set; } = new();

    DegreeDialog? degreeDialog;
    Degree Degree = new();

    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public Employee CurrentEmployee { get; set; } = new();

    public class DegreeData
    {
        public Degree? Degree { get; set; }
        public int EmployeeId { get; set; }
        public string? Employee { get; set; }
        public string? Name { get; set; }
        public string? DegreeDate { get; set; }
        public string? DegreeInstitution { get; set; }
    }

    public List<DegreeData> MyDegrees { get; set; } = new List<DegreeData>();

    public async void OpenMyDegree()
    {
        IsVisible = true;
        await GetDegrees();
        await GetDegreeData();
        StateHasChanged();
    }

    public void CloseMyDegree()
    {
        IsVisible = false;
        StateHasChanged();
    }

    private async Task GetDegrees() => MyDegreesData = await degreeService.GetAllTrainingProgram(CurrentEmployee.Id, Constants.DegreeBaseUrl);

    private async Task GetDegreeData()
    {
        MyDegrees = MyDegreesData
        .Where(s => s.EmployeeId == CurrentEmployee.Id)
        .Select(s => new DegreeData
            {
                Degree = s,
                EmployeeId = s.EmployeeId,
                Employee = s.Employee?.Name,
                Name = s.Name,
                DegreeDate = s.DegreeDate.ToString("MM/dd/yyyy"),
                DegreeInstitution = s.DegreeInstitution
            })
        .Reverse()
        .ToList();
    }

    void OpenDialog() => degreeDialog?.OpenDialog();

    // Show
    private void ShowClicked(Degree item)
    {
        Degree = item;
        degreeDialog?.ChangeTitle("View");
        OpenDialog();
    }

    // Excel Export / PDF Export
    public async Task ToolbarClickHanlder(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExcelExport()!;

        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid!.PdfExport()!;
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
