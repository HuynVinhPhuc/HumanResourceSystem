@implements IDisposable

@if (allState.ShowEmployeeTransfer)
{
    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">@((IsShortage ? "Employee Transfer - Shortage" : "Employee Transfer - Fully"))</h4>
                        <button class="btn btn-outline-@ButtonCss float-end" @onclick="ChangeTypeClicked"><i class="bi bi-exclamation-circle"> </i> Show @((IsShortage ? "Fully" : "Shortage")) Branches</button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Department</th>
                                        <th scope="col">Branch</th>
                                        <th scope="col">Required Employees</th>
                                        <th scope="col">Current Employees</th>
                                        <th scope="col">Transfer Employees</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        var branches = IsShortage ? ShortageBranches : FullyBranches;

                                        if (branches is not null)
                                        {
                                            int count = 1;
                                            foreach (var item in branches)
                                            {
                                                <tr>
                                                    <th scope="row">@count</th>
                                                    <td>@item.Id</td>
                                                    <td>@item.Department!.Name</td>
                                                    <td>@item.Name</td>
                                                    <td>@item.RequiredEmployees</td>
                                                    <td>@item.CurrentEmployees</td>
                                                    <td>@item.CurrentEmployeeTransfers</td>
                                                    <td>
                                                        @if (IsShortage)
                                                        {
                                                            <i class="bi bi-shuffle text-primary" id="cursorStyle" @onclick="() => TransferClicked(item)"></i>
                                                            <span> </span>

                                                            <i class="bi bi-eye text-info" id="cursorStyle" @onclick="() => ShowClicked(item)"></i>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-pencil text-primary" id="cursorStyle" @onclick="() => ShowClicked(item)"></i>
                                                        }
                                                    </td>
                                                </tr>
                                                count++;
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="4"><div class="alert alert-info text-center">No Branch added yet!</div></td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .cursorStyle {
        cursor: pointer
    }
</style>

<EmployeeTransferDialog @ref="employeeTransferDialog"
                        Branch="Branch"
                        EmployeesData="EmployeesData"
                        EmployeeTransfer="EmployeeTransfer"
                        EmployeeTransfers="EmployeeTransfers"
                        HandleSaveOperationEvent="HandleSaveOperationEvent" />

<BranchTransferDetailDialog @ref="branchTransferDetailDialog"
                            Branch="Branch"
                            HandleDeleteOperationEvent="HandleDeleteOperationEvent" />

@code {
    public string Title { get; set; } = "Add";
    public List<Branch> ShortageBranches { get; set; } = new();
    public List<Branch> FullyBranches { get; set; } = new();
    public List<Employee> EmployeesData { get; set; } = new();
    public List<EmployeeTransfer> EmployeeTransfers { get; set; } = new();

    public EmployeeTransfer EmployeeTransfer { get; set; } = new();

    EmployeeTransferDialog? employeeTransferDialog;
    Branch Branch = new();

    bool IsShortage { get; set; } = true;
    string ButtonCss { get; set; } = "success";

    public Employee CurrentEmployee { get; set; } = new();

    void ChangeTypeClicked()
    {
        IsShortage = !IsShortage;
        if (!IsShortage) ButtonCss = "danger";
        else ButtonCss = "success";
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        allState.EmployeeTransferAction += StartDefaults;
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        try
        {
            var CurrentUserId = await customAuthStateProvider.GetCurrentUserId();
            var CurrentUser = await accountService.GetUserById(int.Parse(CurrentUserId));
            CurrentEmployee = await employeeService.GetById(CurrentUser.EmployeeId, Constants.EmployeeBaseUrl);
        }
        catch
        {
            Console.WriteLine("Error");
        }
        allState.Action += StateHasChanged;
    }

    private async void StartDefaults()
    {
        await LoadDefaults();
        StateHasChanged();
    }

    private async Task LoadDefaults()
    {
        ShortageBranches = await employeeTransferService.GetBranchesWithStaffShortage(Constants.EmployeeTransferBaseUrl);
        FullyBranches = await employeeTransferService.GetBranchesWithStaffFully(Constants.EmployeeTransferBaseUrl);
        EmployeesData = await employeeTransferService.GetAllExcssEmployee(Constants.EmployeeTransferBaseUrl);
        EmployeeTransfers = await employeeTransferService.GetAll(Constants.EmployeeTransferBaseUrl);
    }

    // Transfer
    private void TransferClicked(Branch branch)
    {
        Branch = branch;
        employeeTransferDialog?.OpenDialog();
    }

    BranchTransferDetailDialog? branchTransferDetailDialog;
    // Show
    private void ShowClicked(Branch branch)
    {
        Branch = branch;
        branchTransferDetailDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(List<Employee> AddedEmployees)
    {
        bool successCheck = false;
        string message = "";
        EmployeeTransfer.EmployeeRequest = CurrentEmployee.Id;
        EmployeeTransfer.EmployeeRequestName = CurrentEmployee.Name;

        foreach (Employee employee in AddedEmployees)
        {
            var addedEmployeeTransfer = new EmployeeTransfer
                {
                    Name = EmployeeTransfer.Name,
                    NewPosition = EmployeeTransfer.NewPosition,
                    RequestDate = EmployeeTransfer.RequestDate,
                    Reason = EmployeeTransfer.Reason,
                    EmployeeRequestName = CurrentEmployee.Name,
                    EmployeeRequest = CurrentEmployee.Id,
                    EmployeeId = employee.Id,
                    BranchId = Branch.Id
                };
            var result = await employeeTransferService.Insert(addedEmployeeTransfer, Constants.EmployeeTransferBaseUrl);
            successCheck = result.Flag;
            message = result.Message;
        }
        if (successCheck)
        {
            await LoadDefaults();
            EmployeeTransfer = new();
            await dialogService.AlertAsync(message, "Success Operation");
            StateHasChanged();
        }
    }

    private async Task HandleDeleteOperationEvent()
    {
        await LoadDefaults();
        StateHasChanged();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
