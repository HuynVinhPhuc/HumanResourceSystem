@implements IDisposable

@if (allState.ShowRecruitment)
{
    <div class="continer mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Recruitment</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked"><i class="bi bi-plus-circle-dotted"> </i> Add Recruitment </button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Job Name</th>
                                        <th scope="col">Recruiting Unit</th>
                                        <th scope="col">Posting Date</th>
                                        <th scope="col">Closing Date</th>
                                        <th scope="col">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Recruitments is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Recruitments)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>@item.JobName</td>
                                                <td>@item.Branch.Name</td>
                                                <td>@item.PostingDate</td>
                                                <td>@item.ClosingDate</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>&#160;
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4"><div class="alert alert-info text-center">No User registered yet!</div></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .cursorStyle {
        cursor: pointer
    }
</style>

<RecruitmentDialog @ref="recruitmentDialog"
                   HandleSaveOperationEvent="HandleSaveOperationEvent"
                   Recruitment="Recruitment"
                   Branches="Branches" />

@code {
    public string Title { get; set; } = "Add";
    RecruitmentDialog? recruitmentDialog;
    Recruitment Recruitment = new();
    public List<Branch> Branches { get; set; } = new();
    public List<Recruitment> Recruitments { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetRecruitments();
        await GetBranches();
        allState.Action += StateHasChanged;
    }

    private async Task GetRecruitments()
    {
        Recruitments = await recruitmentService.GetAll(Constants.RecruitmentBaseUrl);
    }

    private async Task GetBranches()
    {
        Branches = await branchService.GetAll(Constants.BranchBaseUrl);
    }

    void AddButtonClicked()
    {
        recruitmentDialog?.ChangeTitle("Add");
        Recruitment = new();
        OpenDialog();
    }

    void OpenDialog()
    {
        recruitmentDialog?.OpenDialog();
    }

    //Add or Update
    private async Task HandleSaveOperationEvent()
    {
        bool successCheck = false;
        if (Recruitment.Id > 0)
        {
            var result = await recruitmentService.Update(Recruitment, Constants.RecruitmentBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var result = await recruitmentService.Insert(Recruitment, Constants.RecruitmentBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        if (successCheck)
        {
            Recruitment = new();
            await GetRecruitments();
            recruitmentDialog?.ChangeTitle("Add");
        }
    }

    // Edit
    private void EditClicked(Recruitment recruitment)
    {
        recruitmentDialog?.ChangeTitle("Update");
        Recruitment = recruitment;
        OpenDialog();
    }

    //Delete
    private async Task DeleteClicked(Recruitment recruitment)
    {
        bool confrim = await dialogService.ConfirmAsync($"Are you sure you wanna delete {recruitment.Name}?", "Confrim Delete");
        if (!confrim) return;

        var response = await recruitmentService.DeleteById(recruitment.Id, Constants.RecruitmentBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result) await GetBranches();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
