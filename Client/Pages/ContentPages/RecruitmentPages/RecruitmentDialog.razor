<SfDialog Width="750px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible">
    <DialogEvents OnOpen="OpenDialog"> </DialogEvents>
    <DialogTemplates>
        <Header> @Title Recruitment </Header>
        <Content>
            <EditForm Model="Recruitment" Enhance OnSubmit="Save">
                <div class="card border-success">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-lg-1"></div>
                            <div class="col-lg-10">
                                <div class="form-group">
                                    <label class="form-label">Id</label>
                                    <input @bind="Recruitment.Id" class="form-control" disabled />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-1"></div>
                            <div class="col-lg-5">
                                <div class="form-group">
                                    <label class="form-label">Name</label>
                                    <InputText @bind-Value="Recruitment.Name" class="form-control" />
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Description</label>
                                    <InputTextArea @bind-Value="Recruitment.Description" class="form-control" />
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Job Name</label>
                                    <InputText @bind-Value="Recruitment.JobName" class="form-control" />
                                </div>
                                <div class="form-group mt-1">
                                    <label class="form-label">Ocurring Date</label>
                                    <InputDate @bind-Value="Recruitment.PostingDate" class="form-control" />
                                </div>                                
                            </div>
                            <div class="col-lg-5">
                                <div class="form-group">
                                    @{
                                        string generalDepartment = (Recruitment.Branch == null) ? "Select General Department" : Recruitment.Branch.Department.GeneralDepartment!.Name;
                                    }
                                    <label class="form-label">Select General Department</label>
                                    <SfDropDownList TValue="string" TItem="GeneralDepartment" Placeholder="@generalDepartment" DataSource="GeneralDepartments">
                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="string" TItem="GeneralDepartment" ValueChange="OnGeneralDepartmentValueChange"></DropDownListEvents>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group mt-3">
                                    @{
                                        string department = (Recruitment.Branch == null) ? "Select Department" : Recruitment.Branch.Department!.Name;
                                    }
                                    <label class="form-label">Select Department</label>
                                    <SfDropDownList TValue="string" TItem="Department" Placeholder="@department" DataSource="SelectedDepartments">
                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="string" TItem="Department" ValueChange="OnDepartmentValueChange"></DropDownListEvents>
                                    </SfDropDownList>
                                </div>
                                <div class="form-group mt-3">
                                    @{
                                        string branch = (Recruitment.Branch == null) ? "Select Branch" : Recruitment.Branch!.Name;
                                    }
                                    <label class="form-label">Select Branch</label>
                                    <SfDropDownList TValue="string" TItem="Branch" Placeholder="@branch" DataSource="SelectedBranches">
                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                        <DropDownListEvents TValue="string" TItem="Branch" ValueChange="OnBranchValueChange"></DropDownListEvents>
                                    </SfDropDownList>
                                </div>                                
                                <div class="form-group mt-3">
                                    <label class="form-label">Punishment Date</label>
                                    <InputDate @bind-Value="Recruitment.ClosingDate" class="form-control" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="SAVE" Type="ButtonType.Submit" IsPrimary="true" OnClick="Save" />
    </DialogButtons>
</SfDialog>

@code {
    [Parameter] public Recruitment Recruitment { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();
    [Parameter] public EventCallback<Recruitment> HandleSaveOperationEvent { get; set; }

    private bool IsVisible { get; set; } = false;
    public string Title { get; set; } = "Add";

    public List<GeneralDepartment> GeneralDepartments { get; set; } = [];
    public List<Department> Departments { get; set; } = [];

    public List<Department> SelectedDepartments { get; set; } = [];
    public List<Branch> SelectedBranches { get; set; } = [];

    protected async override Task OnInitializedAsync()
    {
        await LoadDefaults();
    }

    private async Task LoadDefaults()
    {
        GeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        Departments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        Branches = await branchService.GetAll(Constants.BranchBaseUrl);    
    }

    private async void Save()
    {
        if (string.IsNullOrEmpty(Recruitment.Name) || Recruitment.BranchId <= 0)
            await dialogService.AlertAsync("You need to provide Branch name.", "Alert!");
        else
            await HandleSaveOperationEvent.InvokeAsync(Recruitment);
    }

    public void OpenDialog()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void ChangeTitle(string title)
    {
        Title = title;
    }

    // General Department select
    void OnGeneralDepartmentValueChange(ChangeEventArgs<string, GeneralDepartment> args) =>
    SelectedDepartments = Departments.Where(gt => gt.GeneralDepartmentId == int.Parse(args.Value)).ToList();

    // Department select
    void OnDepartmentValueChange(ChangeEventArgs<string, Department> args) =>
    SelectedBranches = Branches.Where(d => d.DepartmentId == int.Parse(args.Value)).ToList();

    public void OnBranchValueChange(ChangeEventArgs<string, Branch> args) => Recruitment.BranchId = int.Parse(args.Value);

}