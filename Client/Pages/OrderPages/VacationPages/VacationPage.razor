@implements IDisposable

@if (allState.ShowVacation)
{
    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-warning shadow-lg">
                    <div class="card-header"><h4 class="float-start">Manage Employees' Vacations</h4></div>
                    <div class="card-body">
                        @{
                            var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                        }
                        <SfGrid DataSource="@Vacations" AllowPaging="true" AllowSorting="true" Toolbar=@Tool AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                            <GridPageSettings PageSize="5"></GridPageSettings>
                            <GridEvents OnToolbarClick="ToolbarClickHanlder" TValue="VacationData"></GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(VacationData.EmployeeId) HeaderText="Employee ID"></GridColumn>
                                <GridColumn Field=@nameof(VacationData.Employee) HeaderText="Employee Name"></GridColumn>
                                <GridColumn Field=@nameof(VacationData.Type) HeaderText="Type"></GridColumn>
                                <GridColumn Field=@nameof(VacationData.Status) HeaderText="Status"></GridColumn>
                                <GridColumn Field=@nameof(VacationData.StartDate) HeaderText="Start Date"></GridColumn>
                                <GridColumn Field=@nameof(VacationData.EndDate) HeaderText="End Date"></GridColumn>
                                <GridColumn Field=@nameof(VacationData.NumberOfDate) HeaderText="Number of days"></GridColumn>
                                <GridColumn HeaderText="Action">
                                    <Template>
                                        @{
                                            var item = (context as VacationData);
                                            <div>
                                                @if (item!.Vacation!.StartDate > DateTime.Now)
                                                {
                                                    <i class="bi bi-pencil text-primary" id="cursorStyle" @onclick="() => EditClicked(item!.Vacation!)"></i>
                                                    <span> </span>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item!.Vacation!)"></i>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-eye text-info" id="cursorStyle" @onclick="() => ShowClicked(item!.Vacation!)"></i>
                                                }
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .cursorStyle {
        cursor: pointer
    }
</style>

<VacationDialog @ref="vacationDialog"
                ItemModel="ItemModel"
                VacationTypes="VacationTypes"
                HandleSaveOperationEvent="HandleSaveOperationEvent">
</VacationDialog>

@code {
    private SfGrid<VacationData>? DefaultGrid;
    VacationDialog? vacationDialog;
    Vacation ItemModel = new();
    public List<Vacation> VacationsData { get; set; } = new();
    public List<VacationType> VacationTypes { get; set; } = new();

    public class VacationData
    {
        public Vacation? Vacation { get; set; }
        public int EmployeeId { get; set; }
        public string? Employee { get; set; }
        public string? Type { get; set; }
        public string? Status { get; set; }
        public string? StartDate { get; set; }
        public string? EndDate { get; set; }
        public int NumberOfDate { get; set; }
    }

    public List<VacationData> Vacations { get; set; } = new List<VacationData>();

    protected override async Task OnInitializedAsync()
    {        
        allState.Action += StateHasChanged;
        allState.VacationAction += LoadDefaults;
    }

    private async void LoadDefaults()
    {
        await GetVacations();
        await GetTypes();
        StateHasChanged();
    }

    private async Task GetTypes() => VacationTypes = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);

    private async Task GetVacations()
    {
        VacationsData = await vacationService.GetAll(Constants.VacationBaseUrl);
        await GetVacationData();
    }

    private async Task GetVacationData()
    {
        Vacations = VacationsData
        .Select(s => new VacationData
            {
                Vacation = s,
                EmployeeId = s.EmployeeId,
                Employee = s.Employee?.Name,
                Type = s.VacationType?.Name,
                Status = s.Status,
                StartDate = s.StartDate.ToString("MM/dd/yyyy"),
                EndDate = s.EndDate.ToString("MM/dd/yyyy"),
                NumberOfDate = s.NumberOfDays
            })
        .Reverse()
        .ToList();
    }

    void OpenDialog() => vacationDialog?.OpenDialog();

    //Add or Update
    private async Task HandleSaveOperationEvent(Vacation item)
    {
        var result = await vacationService.Update(item, Constants.VacationBaseUrl);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ItemModel = new();
            await GetVacations();
            vacationDialog?.CloseDialog();
        }
    }

    // Edit
    private void EditClicked(Vacation item)
    {
        ItemModel = item;
        vacationDialog?.ChangeTitle("Approve");
        OpenDialog();
    }

    //Delete
    private async Task DeleteClicked(Vacation item)
    {
        bool confrim = await dialogService.ConfirmAsync($"Are you sure you wanna delete this?", "Confrim Delete");
        if (!confrim) return;

        var response = await vacationService.DeleteById(item.Id, Constants.VacationBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result) await GetVacations();
    }

    // Show
    private void ShowClicked(Vacation item)
    {
        ItemModel = item;
        vacationDialog?.ChangeTitle("View");
        OpenDialog();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    // Excel Export / PDF Export
    public async Task ToolbarClickHanlder(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExcelExport()!;

        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid!.PdfExport()!;
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
